{
  "info": {
    "name": "Vehicle Service API Tests",
    "description": "Test collection for Vehicle Service CRUD operations",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Vehicle",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"etat\": \"OPERATIONNEL_GARE\",\n  \"marque\": \"Tesla\",\n  \"modele\": \"Model 3\",\n  \"nbPlaces\": 5,\n  \"kilometrage\": 15000,\n  \"niveauCharge\": 85,\n  \"position\": \"48.8566,2.3522\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/vehicules",
          "host": ["{{baseUrl}}"],
          "path": ["vehicules"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has vehicle data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('marque');",
              "    pm.expect(jsonData).to.have.property('etat');",
              "    pm.expect(jsonData).to.have.property('nbPlaces');",
              "    pm.globals.set('vehicleId', jsonData.id);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Vehicles",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/vehicules",
          "host": ["{{baseUrl}}"],
          "path": ["vehicules"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Vehicle by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/vehicules/{{vehicleId}}",
          "host": ["{{baseUrl}}"],
          "path": ["vehicules", "{{vehicleId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has vehicle data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('marque');",
              "    pm.expect(jsonData).to.have.property('etat');",
              "    pm.expect(jsonData).to.have.property('modele');",
              "    pm.expect(jsonData).to.have.property('nbPlaces');",
              "    pm.expect(jsonData).to.have.property('kilometrage');",
              "    pm.expect(jsonData).to.have.property('niveauCharge');",
              "    pm.expect(jsonData).to.have.property('position');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Update Vehicle",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"etat\": \"OPERATIONNEL_USAGE\",\n  \"marque\": \"Tesla\",\n  \"modele\": \"Model 3 Performance\",\n  \"nbPlaces\": 5,\n  \"kilometrage\": 25000,\n  \"niveauCharge\": 65,\n  \"position\": \"48.8606,2.3376\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/vehicules/{{vehicleId}}",
          "host": ["{{baseUrl}}"],
          "path": ["vehicules", "{{vehicleId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Vehicle updated successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.modele).to.eql('Model 3 Performance');",
              "    pm.expect(jsonData.etat).to.eql('OPERATIONNEL_USAGE');",
              "    pm.expect(jsonData.kilometrage).to.eql(25000);",
              "    pm.expect(jsonData.niveauCharge).to.eql(65);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete Vehicle",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/vehicules/{{vehicleId}}",
          "host": ["{{baseUrl}}"],
          "path": ["vehicules", "{{vehicleId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test(\"Response body is empty\", function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/vehicule-service"
    }
  ]
}
